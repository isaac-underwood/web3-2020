/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "static/js";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./static/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./static/js/index.js":
/*!****************************!*\
  !*** ./static/js/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n$(\"button#testButton\").on(\"click\", showAllCountries()); // async function showAllCountries() {\n//     await $.get('/countries', function(response) {\n//         var countries = JSON.parse(response);\n//         function x(d) { return d.data.income_per_person_gdppercapita_ppp_inflation_adjusted; }\n//         function y(d) { return d.data.military_expenditure_percent_of_gdp; }\n//         function radius(d) { return d.data.population_total; }\n//         function color(d) { return \"red\"; }\n//         function key(d) { return d.data.name; }\n//         function position(dot) {\n//             dot.attr(\"cx\", function(d) { return xScale(x(d)); })\n//                 .attr(\"cy\", function(d) { return yScale(y(d)); })\n//                 .attr(\"r\", function(d) { return radiusScale(radius(d)); });\n//         }\n//         function interpolateData(year) {\n//             return countries.map(function(d) {\n//                 return {\n//                     name: d.name,\n//                     income: interpolateValues(d.data.income_per_person_gdppercapita_ppp_inflation_adjusted, year),\n//                     population: interpolateValues(d.data.population_total, year),\n//                     militaryExpenditure: interpolateValues(d.data.military_expenditure_percent_of_gdp, year)\n//                 };\n//             });\n//         }\n//         var bisect = d3.bisector(function(d) { return d[0]; });\n//         // Finds (and possibly interpolates) the value for the specified year.\n//         function interpolateValues(values, year) {\n//             var i = bisect.left(Object.values(values), year, 0, Object.values(values).length - 1);\n//             var a = values[i];\n//             console.log(Object.keys(values[i]));\n//             if (i > 0) {\n//                 var b = values[i - 1],\n//                     t = (year - a[0]) / (b[0] - a[0]);\n//                 return a[1] * (1 - t) + b[1] * t;\n//             }\n//             return a[1];\n//         }\n//         function order(a, b) { return radius(b) - radius(a); }\n//         var margin = { top: 19.5, right: 19.5, bottom: 19.5, left: 39.5 },\n//             width = 960 - margin.right,\n//             height = 500 - margin.top - margin.bottom;\n//         // Various scales. These domains make assumptions of data, naturally.\n//         var xScale = d3.scaleLog().domain([300, 1e5]).range([0, width]),\n//             yScale = d3.scaleLinear().domain([10, 85]).range([height, 0]),\n//             radiusScale = d3.scaleSqrt().domain([0, 5e8]).range([0, 40]);\n//         // The x & y axes.\n//         // var xAxis = d3.svg.axis().scale(xScale).orient(\"bottom\").ticks(12, d3.format(\",d\"));\n//         // var yAxis = d3.svg.axis().scale(yScale).orient(\"left\");\n//         // Create the SVG container and set the origin.\n//         var svg = d3.select(\"#vis\").append(\"svg\")\n//             .attr(\"width\", width + margin.left + margin.right)\n//             .attr(\"height\", height + margin.top + margin.bottom)\n//             .append(\"g\")\n//             .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n//         // Add the x-axis.\n//         svg.append(\"g\")\n//             .attr(\"class\", \"x axis\")\n//             .attr(\"transform\", \"translate(0,\" + height + \")\")\n//             .call(d3.axisBottom(xScale));\n//         // Add the y-axis.\n//         svg.append(\"g\")\n//             .attr(\"class\", \"y axis\")\n//             .call(d3.axisLeft(yScale));\n//         // Add an x-axis label.\n//         svg.append(\"text\")\n//             .attr(\"class\", \"x label\")\n//             .attr(\"text-anchor\", \"end\")\n//             .attr(\"x\", width)\n//             .attr(\"y\", height - 6)\n//             .text(\"income per capita, inflation-adjusted (dollars)\");\n//         // Add a y-axis label.\n//         svg.append(\"text\")\n//             .attr(\"class\", \"y label\")\n//             .attr(\"text-anchor\", \"end\")\n//             .attr(\"y\", 6)\n//             .attr(\"dy\", \".75em\")\n//             .attr(\"transform\", \"rotate(-90)\")\n//             .text(\"military expenditure (percent of gdp)\");\n//         // Add the year label; the value is set on transition.\n//         var label = svg.append(\"text\")\n//             .attr(\"class\", \"year label\")\n//             .attr(\"text-anchor\", \"end\")\n//             .attr(\"y\", height - 24)\n//             .attr(\"x\", width)\n//             .text(1800);\n//         var format = d3.format(\".2s\");\n//         // var tip = d3.tip()\n//         //     .attr('class', 'd3-tip')\n//         //     .direction('s')\n//         //     .html(function(d) {\n//         //         return \"<p><strong>\" + d.name + \"</strong></p><p><strong>Population: </strong>\" + format(d.population) + \"</p>\";\n//         //     })\n//         // Add a dot per nation. Initialize the data at 1800, and set the colors.\n//         var dot = svg.append(\"g\")\n//             // .call(tip)\n//             .attr(\"class\", \"dots\")\n//             .selectAll(\".dot\")\n//             .data(interpolateData(1800))\n//             .enter().append(\"circle\")\n//             // .on('mouseover', tip.show)\n//             // .on('mouseout', tip.hide)\n//             .attr(\"class\", function(d) { return \"dot \" + d.data.name; })\n//             .style(\"fill\", function(d) { return \"red\"; })\n//             .call(position)\n//             .sort(order);\n//     }).fail(function() {\n//         console.log(\"Countries not loaded\");\n//     }).always(function() {\n//         console.log(\"this is printed no matter what\");\n//     });\n// }\n// async function showAllCountries() {\n//     await $.get('/countries', function(response) {\n//         var countries = JSON.parse(response);\n//         console.log(countries[0].data.population_total[\"1800\"])\n//         console.log(countries);\n//         // let leng = Object.keys(countries[0].data.income_per_person_gdppercapita_ppp_inflation_adjusted).length;\n//         // console.log(Object.keys(countries[0].data.income_per_person_gdppercapita_ppp_inflation_adjusted)[leng - 1]);\n//         // var g = d3.select(\"svg\")\n//         //     .selectAll(\"g\")\n//         //     .data(countries)\n//         //     .attr(\"height\", 500);\n//         // var x = d3.scaleLinear()\n//         //     .domain([0, 100])\n//         //     .range([100, 800]);\n//         // // x.domain(d3.extent(countries, function(d) { return d.year; }));\n//         // // y.domain([0, d3.max(countries, function(d) { return d.population_total; })]);\n//         // g.append(\"g\")\n//         //     .attr(\"transform\", \"translate(0,50)\")\n//         //     .call(d3.axisBottom(x));\n//         var g = d3.select(\"#vis\")\n//             .selectAll(\"g\")\n//             .attr(\"width\", 1000)\n//             .data(countries);\n//         var margin = { top: 10, right: 15, bottom: 40, left: 40 },\n//             width = 1000 - margin.left - margin.right,\n//             height = 750 - margin.top - margin.bottom;\n//         // create svg element, respecting margins\n//         var svg = d3.select(\"#vis\")\n//             .append(\"svg\")\n//             .attr(\"width\", width + margin.left + margin.right)\n//             .attr(\"height\", height + margin.top + margin.bottom)\n//             .append(\"g\")\n//             .attr(\"transform\",\n//                 \"translate(\" + margin.left + \",\" + margin.top + \")\");\n//         // Add X axis\n//         var x = d3.scaleLinear().domain([0, 100000]).range([0, width]);\n//         svg\n//             .append(\"g\")\n//             .attr(\"transform\", \"translate(0,\" + height + \")\")\n//             .call(d3.axisBottom(x));\n//         // Add Y axis\n//         var y = d3.scaleLinear().domain([0, 100]).range([height, 0]);\n//         svg\n//             .append(\"g\")\n//             .call(d3.axisLeft(y));\n//         // Add X axis label:\n//         svg.append(\"text\")\n//             .attr(\"text-anchor\", \"end\")\n//             .attr(\"x\", width)\n//             .attr(\"y\", height + margin.top + 20)\n//             .text(\"X axis title\");\n//         // Y axis label:\n//         svg.append(\"text\")\n//             .attr(\"text-anchor\", \"end\")\n//             .attr(\"transform\", \"rotate(-90)\")\n//             .attr(\"y\", -margin.left + 20)\n//             .attr(\"x\", -margin.top)\n//             .text(\"Y axis title\")\n//         // create new 'g' elements for each country\n//         var en = g.enter().append(\"g\")\n//             .attr(\"transform\", function(d) {\n//                 return \"translate(\" + 500 + \",\" + 320 + \")\"\n//             });\n//         // // // add a circle to each 'g'\n//         var circle = en.append(\"circle\")\n//             .attr(\"r\", function(d) { return 25; })\n//             .attr(\"fill\", function(d, i) { return i % 2 == 0 ? \"red\" : \"blue\" })\n//             .enter();\n//         // // add a text to each 'g'\n//         // en.append(\"text\").text(function(d) { return d.name });\n//     }).fail(function() {\n//         console.log(\"Countries not loaded\");\n//     }).always(function() {\n//         console.log(\"this is printed no matter what\");\n//     });\n// }\n// function chart() {\n//     const svg = d3.create(\"svg\")\n//         .attr(\"viewBox\", [0, 0, width, height]);\n//     svg.append(\"g\")\n//         .call(xAxis);\n//     svg.append(\"g\")\n//         .call(yAxis);\n//     svg.append(\"g\")\n//         .call(grid);\n//     const circle = svg.append(\"g\")\n//         .attr(\"stroke\", \"black\")\n//         .selectAll(\"circle\")\n//         .data(dataAt(1800), d => d.name)\n//         .join(\"circle\")\n//         .sort((a, b) => d3.descending(a.population, b.population))\n//         .attr(\"cx\", d => x(d.income))\n//         .attr(\"cy\", d => y(d.lifeExpectancy))\n//         .attr(\"r\", d => radius(d.population))\n//         .attr(\"fill\", d => color(d.region))\n//         .call(circle => circle.append(\"title\")\n//             .text(d => [d.name, d.region].join(\"\\n\")));\n//     return Object.assign(svg.node(), {\n//         update(data) {\n//             circle.data(data, d => d.name)\n//                 .sort((a, b) => d3.descending(a.population, b.population))\n//                 .attr(\"cx\", d => x(d.income))\n//                 .attr(\"cy\", d => y(d.lifeExpectancy))\n//                 .attr(\"r\", d => radius(d.population));\n//         }\n//     });\n// }\n// function showAllCountries() {\n//     $.get('/countries', function(response) {\n//         var countries = JSON.parse(response);\n//         console.log(response);\n//         console.log(countries);\n//         var currentData = dataAt(year);\n//         chart.update(currentData);\n//         var margin = ({ top: 20, right: 20, bottom: 35, left: 40 });\n//         var radius = d3.scaleSqrt([0, 5e8], [0, width / 24]);\n//         var width, height = 560;\n//         var y = d3.scaleLinear([14, 86], [height - margin.bottom, margin.top]);\n//         var x = d3.scaleLog([200, 1e5], [margin.left, width - margin.right]);\n//         const circle = svg.append(\"g\")\n//             .attr(\"stroke\", \"black\")\n//             .selectAll(\"circle\")\n//             .data(dataAt(1800), countries => countries.name)\n//             .join(\"circle\")\n//             .sort((a, b) => d3.descending(a.population_total, b.population_total))\n//             .attr(\"cx\", d => x(d.income_per_person_gdppercapita_ppp_inflation_adjusted))\n//             .attr(\"cy\", d => y(d.military_expenditure_percent_of_gdp))\n//             .attr(\"r\", d => radius(d.population_total))\n//             .attr(\"fill\", d => color('red'))\n//             .call(circle => circle.append(\"title\")\n//                 .text(d => d.name));\n//         grid = g => g\n//             .attr(\"stroke\", \"currentColor\")\n//             .attr(\"stroke-opacity\", 0.1)\n//             .call(g => g.append(\"g\")\n//                 .selectAll(\"line\")\n//                 .data(x.ticks())\n//                 .join(\"line\")\n//                 .attr(\"x1\", d => 0.5 + x(d))\n//                 .attr(\"x2\", d => 0.5 + x(d))\n//                 .attr(\"y1\", margin.top)\n//                 .attr(\"y2\", height - margin.bottom))\n//             .call(g => g.append(\"g\")\n//                 .selectAll(\"line\")\n//                 .data(y.ticks())\n//                 .join(\"line\")\n//                 .attr(\"y1\", d => 0.5 + y(d))\n//                 .attr(\"y2\", d => 0.5 + y(d))\n//                 .attr(\"x1\", margin.left)\n//                 .attr(\"x2\", width - margin.right));\n//         yAxis = g => g\n//             .attr(\"transform\", `translate(${margin.left},0)`)\n//             .call(d3.axisLeft(y))\n//             .call(g => g.select(\".domain\").remove())\n//             .call(g => g.append(\"text\")\n//                 .attr(\"x\", -margin.left)\n//                 .attr(\"y\", 10)\n//                 .attr(\"fill\", \"currentColor\")\n//                 .attr(\"text-anchor\", \"start\")\n//                 .text(\"↑ Military expenditure (million)\"));\n//         xAxis = g => g\n//             .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n//             .call(d3.axisBottom(x).ticks(width / 80, \",\"))\n//             .call(g => g.select(\".domain\").remove())\n//             .call(g => g.append(\"text\")\n//                 .attr(\"x\", width)\n//                 .attr(\"y\", margin.bottom - 4)\n//                 .attr(\"fill\", \"currentColor\")\n//                 .attr(\"text-anchor\", \"end\")\n//                 .text(\"Income per capita (dollars) →\"));\n//         const svg = d3.create(\"svg\").attr(\"viewBox\", [0, 0, 560, 560]);\n//         svg.append(\"g\")\n//             .call(xAxis);\n//         svg.append(\"g\")\n//             .call(yAxis);\n//         svg.append(\"g\")\n//             .call(grid);\n//         var g = d3.select(\"svg\").selectAll(\"g\").data(countries);\n//         // create new 'g' elements for each country\n//         var en = g.enter().append(\"g\")\n//             .filter(function(d) { return d.data[\"income_per_person_gdppercapita_ppp_inflation_adjusted\"] })\n//             .attr(\"transform\", function(d) {\n//                 return \"translate(\" + (Math.random() * 1000) + 40 + \",\" + (Math.random() * 1000) + 40 + \")\"\n//             });\n//         // add a circle to each 'g'\n//         var circle = en.append(\"circle\")\n//             .attr(\"r\", function(d) { return Math.random() * 20 })\n//             .attr(\"fill\", function(d, i) { return i % 2 == 0 ? \"red\" : \"blue\" });\n//         // add a text to each 'g'\n//         en.append(\"text\").text(function(d) { return d.name });\n//     }).fail(function() {\n//         console.log(\"Countries not loaded\");\n//     }).always(function() {\n//         console.log(\"this is printed no matter what\");\n//     });\n// }\n\nfunction showAllCountries() {\n  return _showAllCountries.apply(this, arguments);\n}\n\nfunction _showAllCountries() {\n  _showAllCountries = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var update, response, countries, g, margin, height, width, x_max, y_max, xAxis, yAxis, en, circle, animationButton;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            update = function update(nRadius) {\n              // adjust the text on the range slider\n              d3.select(\"#nRadius-value\").text(nRadius);\n              d3.select(\"#nRadius\").property(\"value\", nRadius); // update the circle radius\n\n              d3.select(\"#vis\").selectAll(\"circle\").attr(\"cx\", function (d) {\n                if (d.data.income_per_person_gdppercapita_ppp_inflation_adjusted) {\n                  return xAxis(d.data.income_per_person_gdppercapita_ppp_inflation_adjusted[String(nRadius)]);\n                }\n              }).attr(\"cy\", function (d) {\n                if (d.data.armed_forces_personnel_total) {\n                  return yAxis(d.data.armed_forces_personnel_total[String(nRadius)]);\n                }\n              }).attr(\"r\", function (d) {\n                return Math.sqrt(d.data.population_total[String(nRadius)] * 0.00001);\n              });\n            };\n\n            _context.next = 4;\n            return fetch('/countries');\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            countries = _context.sent;\n            console.log(countries);\n            g = d3.select(\"svg\").selectAll(\"g\").data(countries);\n            margin = {\n              top: 50,\n              right: 40,\n              bottom: 70,\n              left: 250\n            };\n            height = 850 - margin.top - margin.bottom;\n            width = 1750 - margin.left - margin.right;\n            x_max = d3.max(countries, function (d) {\n              if (d.data.income_per_person_gdppercapita_ppp_inflation_adjusted) {\n                return +d.data.income_per_person_gdppercapita_ppp_inflation_adjusted[\"2010\"];\n              }\n            });\n            y_max = d3.max(countries, function (d) {\n              if (d.data.armed_forces_personnel_total) {\n                return +d.data.armed_forces_personnel_total[\"2010\"];\n              }\n            });\n            console.log(x_max); // var xAxis = d3.scaleLinear()\n            //     .domain([0, testmax])\n            //     .range([marginLeft, width - marginRight])\n            //     .interpolate(d3.interpolateRound);\n            // Create axis\n\n            xAxis = d3.scaleLinear().range([margin.left, width]).domain([0, x_max]);\n            yAxis = d3.scaleLinear().range([height, margin.top]).domain([0, y_max]);\n            d3.select(\"#vis\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(0\" + \",\" + margin.right + \")\");\n            d3.select(\"#vis\").append(\"g\").attr(\"transform\", \"translate(0\" + \",\" + height + \")\").call(d3.axisBottom(xAxis));\n            d3.select(\"#vis\").append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + 0 + \")\").call(d3.axisLeft(yAxis));\n            d3.select(\"#vis\").append(\"text\").attr(\"text-anchor\", \"end\").attr(\"x\", width).attr(\"y\", height - 5).text(\"Income per person (GDP per capita)\");\n            d3.select(\"#vis\").append(\"text\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", margin.left + 20).attr(\"x\", -margin.top).text(\"Armed Forces Personnel (Total)\"); // // Add the year label; the value is set on transition.\n            // let label = d3.select(\"#vis\").append(\"text\")\n            //     .attr(\"class\", \"year label\")\n            //     .attr(\"text-anchor\", \"end\")\n            //     .attr(\"y\", height - 24)\n            //     .attr(\"x\", width)\n            //     .text(1800);\n            // var overlay = d3.select(\"#vis\").append(\"rect\")\n            // \t.attr(\"class\", \"overlay\")\n            // \t.attr(\"x\", box.x)\n            // \t.attr(\"y\", box.y)\n            // \t.attr(\"width\", box.width)\n            // \t.attr(\"height\", box.height)\n            // \t.on(\"mouseover\", enableInteraction);\n            // create new 'g' elements for each country\n\n            en = g.enter().append(\"g\"); // add a circle to each 'g'\n\n            circle = en.append(\"circle\").attr(\"area\", function (d) {\n              return d3.scaleSqrt().domain([0, d3.max(d.data.population_total[\"1800\"])]);\n            }).attr(\"fill\", function (d, i) {\n              return d3.scaleOrdinal(countries.map(function (d) {\n                return d.region;\n              }));\n            }).attr(\"cx\", function (d) {\n              if (d.data.income_per_person_gdppercapita_ppp_inflation_adjusted) {\n                return xAxis(d.data.income_per_person_gdppercapita_ppp_inflation_adjusted[\"1800\"]);\n              }\n            }).attr(\"cy\", function (d) {\n              if (d.data.armed_forces_personnel_total) {\n                return yAxis(d.data.armed_forces_personnel_total[\"1988\"]);\n              }\n            });\n            circle.append(\"text\").text(function (d) {\n              return d.name;\n            });\n            circle.append(\"income\").text(function (d) {\n              if (d.data.income_per_person_gdppercapita_ppp_inflation_adjusted) {\n                return d.data.income_per_person_gdppercapita_ppp_inflation_adjusted[\"1800\"];\n              }\n            }); // Change size of circle as a transition\n\n            d3.selectAll(\"circle\").transition().duration(750).delay(function (d, i) {\n              return i * 10;\n            }).attr(\"r\", function (d) {\n              return Math.sqrt(d.data.population_total[\"1800\"] * 0.00001);\n            });\n            d3.select(\"#nRadius\").on(\"input\", function () {\n              update(+this.value);\n            }); // Set an animation from initial year values to ending year values once animation button clicked\n\n            animationButton = d3.select(\"#animation-start\").on(\"click\", function () {\n              d3.selectAll(\"circle\").transition().duration(11500).attr(\"cx\", function (d) {\n                if (d.data.income_per_person_gdppercapita_ppp_inflation_adjusted) {\n                  return xAxis(d.data.income_per_person_gdppercapita_ppp_inflation_adjusted[\"2017\"]);\n                }\n              }).attr(\"cy\", function (d) {\n                if (d.data.armed_forces_personnel_total) {\n                  return yAxis(d.data.armed_forces_personnel_total[\"2017\"]);\n                }\n              }).attr(\"r\", function (d) {\n                return Math.sqrt(d.data.population_total[\"2017\"] * 0.000005);\n              });\n            });\n            _context.next = 35;\n            break;\n\n          case 32:\n            _context.prev = 32;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 35:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 32]]);\n  }));\n  return _showAllCountries.apply(this, arguments);\n}\n\nfunction showCountry(country) {\n  $.get('/countries/', country, function () {\n    console.log(\"Country found\");\n  }).fail(function () {\n    console.log(\"Country not found\");\n  }).always(function () {\n    console.log(\"this is printed no matter what\");\n  });\n}\n\nfunction addCountry() {\n  $.post('/countries/new', function () {\n    console.log(\"Country added\");\n  }).fail(function () {\n    console.log(\"Error country not added\");\n  });\n}\n\nfunction updateCountry(country) {\n  $.ajax('/countries/', country, {\n    type: 'PUT'\n  }).done(function () {\n    console.log(\"Country updated\");\n  }).fail(function () {\n    console.log(\"Error updating country\");\n  });\n}\n\nfunction deleteCountry(country) {\n  $.ajax('/countries/', country_name, {\n    type: 'DELETE'\n  }).done(function () {\n    console.log(\"Country deleted\");\n  }).fail(function () {\n    console.log(\"Error deleting country\");\n  });\n}\n\n//# sourceURL=webpack:///./static/js/index.js?");

/***/ })

/******/ });